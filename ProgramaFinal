#include <stdio.h>
#include <stdlib.h>
//PROTOTIPO DE LAS FUNCIONES
	void MENU();
	void SUMA();
	void RESTA();
	void MULTIPLICACION();
	void DIVISION();
	void DERIVADA();
	void SALIR();
//-------------------------------------------
//PROTOTIPO struct
typedef struct nodo{
	struct nodo *siguiente;
	int coeficiente, variable, exponente;
}Nodo;

typedef Nodo Polinomio;

typedef struct ListaPolinomios{
	struct ListaPolinomios *siguiente;
	Polinomio *polinomio;
}ListaPolinomios;

int inicializarPolinomio(Polinomio **polinomio);
int insertarEnPolinomio(Polinomio *polinomio, int coeficiente, int exponente);

int inicializarListaPolinomios(ListaPolinomios **lista);
int insertarPolinomio(ListaPolinomios *lista, Polinomio *polinomio);

void imprimirPolinomio(Polinomio *polinomio);
void diferenciarPolinomio(Polinomio *polinomio);
void imprimirLista(ListaPolinomios **lista);
void sumarPolinomios(ListaPolinomios *lista, Polinomio *polinomio);

void menuDERIVADA();
void menuSUMA();

//-------------------------------------------
int cent, op; 
//MAIN PRINCIPAL DEL PROGRAMA

int main(){
    MENU();
    system("PAUSE");
    return 0;
}

//DEFINICION DE FUNCIONES
		//FUNCION MENU
		void MENU(){			//ELABORADO: GIOVANNI CHAVES FLORES	Y DIEGO SANTIAGO GUTIERREZ	INICIO: 25/11/2019-FINAL: 8/12/2019 		TIEMPO: 11:00-11:30 (a estas horas era posible trabajar)
	     	 do{
	      		printf("\n--------------------MENU DE OPCIONES-------------------------\n");
	            printf("Bienvenido al menu de operaciones de polinomios, elige una opcion\n");
				printf("\t(1) Agregar polinomio.\n");
				printf("\t(2) Sumar polinomios.\n");
				printf("\t(3) Restar polinomios.\n");
				printf("\t(4) Multiplicar polinomios.\n");
				printf("\t(5) Dividir polinomio entre monomio.\n");
				printf("\t(6) Derivada polinomio.\n");
				printf("\t(7) Cargar polinomios.\n");
				printf("\t(8) Guardar polinomios.\n");
				printf("\t(9) Salir\n");
	            printf("------------------------------------------------------------\n");
				
				printf("\n\nOpcion: ");
	            scanf("%d",&op);
	
	            switch(op)
				{
	               case 1:
	                  	printf("------------------------------------------------------------\n");
		  				printf("Agregar polinomio.");   
						printf("\n------------------------------------------------------------\n");
						AGREGAR();
						system("pause");
						system("cls");
	               break;
	               case 2:
	                    printf("------------------------------------------------------------\n");
		  				printf("Sumar polinomios.");   
						printf("\n------------------------------------------------------------\n");   
						menuSUMA();
						system("pause");
						system("cls");
	               break;
	               case 3:
	                  	printf("------------------------------------------------------------\n");
		  				printf("Restar polinomios.");   
						printf("\n------------------------------------------------------------\n");  
						RESTA();
						system("pause");
						system("cls");
					break; 
	                case 4:
	                  	printf("------------------------------------------------------------\n");
		  				printf(" Multiplicar polinomios.");   
						printf("\n------------------------------------------------------------\n");
						MULTIPLICACION();
						system("pause");
						system("cls");
					break;
	                case 5:
	                  	printf("------------------------------------------------------------\n");
		  				printf("Dividir polinomio entre monomio.");   
						printf("\n------------------------------------------------------------\n");
						DIVISION();
						system("pause");
					break;
					case 6:
	                  	printf("------------------------------------------------------------\n");
		  				printf("Derivada polinomio.");   
						printf("\n------------------------------------------------------------\n");
						menuDERIVADA();
						 system("pause");
						 system("cls");
					break;
					case 7:
	                  	printf("------------------------------------------------------------\n");
		  				printf(" Cargar polinomios.");   
						printf("\n------------------------------------------------------------\n");
						CARGAR();
					 	system("pause");
					 	system("cls");
					break;
					case 8:
	                  	printf("------------------------------------------------------------\n");
		  				printf("Guardar polinomios.");   
						printf("\n------------------------------------------------------------\n");
						GUARDAR();
	                	system("pause");
	                	system("cls");
					break;
					case 9:
	    	            SALIR();
						system("pause");
		            break;   
	                default:
	                  printf("\n OPCIÃ“N INEXISTENTE, INTRODUCE UNA OPCION VALIDA\n");
	                break;
	            }
	        }
	 			while(op!=9);
		}
		//FUNCION SUMA	
		void SUMA(){   			 //ELABORADO: GIOVANNI CHAVES FLORES		INICIO: 28/11/2019-FINAL: 30/11/2019 		TIEMPO: 10:00-11.00 (a estas horas era posible trabajar)
	    int i, aux_var;
	    int grado_prim_poli, grado_segun_poli, max_grad;
	  
			    printf("Ingrese el grado del primer polinomio: ");
			    scanf("%i", &grado_prim_poli);
	
	            printf("Ingrese el grado del segundo polinomio: ");
	            scanf("%i", &grado_segun_poli);

                    if(grado_prim_poli > grado_segun_poli) {
						max_grad = grado_prim_poli; 
					}
                    else{
						max_grad = grado_segun_poli;
					}

                    /* ---------------------------------- */
                    int matriz_coef[max_grad];
                    /* ---------------------------------- */

                    for(i = 0; i < max_grad; i++){
                        matriz_coef[i] = 0;
                    }

                printf("\n\n----------------------------\n");
                printf("PARA EL PRIMER POLINOMIO\n");
                printf("----------------------------\n");

                for(i = 0; i < grado_prim_poli + 1; i++){
                    printf("Valor del coeficiente grado %i: ", i);
                    scanf("%i", &matriz_coef[i]);
                }

                printf("\n\n----------------------------\n");
                printf("PARA EL SEGUNDO POLINOMIO\n");
                printf("----------------------------\n");

                for(i = 0; i < grado_segun_poli + 1; i++){
                    printf("Valor del coeficiente grado %i: ", i);
                    scanf("%i", &aux_var);
                    matriz_coef[i] = matriz_coef[i] + aux_var;
                }

                printf("\n\n----------------------------\n");
                printf("RESULTADOS\n");
                printf("----------------------------\n");

                for(i = max_grad; i >= 0; --i){
                    if(i == 0){
                        printf("%i",  matriz_coef[i]);
                    }
                    else if(i == 1){
                         printf("%ix + ",  matriz_coef[i]);
                    }
                    else{
                        printf("%ix^%i + ", matriz_coef[i], i);
                    }
                }

                printf("\n\n");
                system("pause");
        }
		//FUNCION RESTA
		void RESTA(){ 			 //ELABORADO: GIOVANNI CHAVES FLORES		INICIO: 29/11/2019-FINAL: 1/12/2019 		TIEMPO: 10:00-11.00 (a estas horas era posible trabajar)
			    int i, aux_var;
			    int grado_prim_poli, grado_segun_poli, max_grad;
		
			    printf("Ingrese el grado del primer polinomio: ");
			    scanf("%i", &grado_prim_poli);

                printf("Ingrese el grado del segundo polinomio: ");
                scanf("%i", &grado_segun_poli);

                if(grado_prim_poli > grado_segun_poli){
                	max_grad = grado_prim_poli;
                }
                else{
                    max_grad = grado_segun_poli;
                }

                    /* ---------------------------------- */
                    int matriz_coef[max_grad];
                    /* ---------------------------------- */

                for(i = 0; i < max_grad; i++){
                    matriz_coef[i] = 0;
                }

                printf("\n\n----------------------------\n");
                printf("PARA EL PRIMER POLINOMIO\n");
                printf("----------------------------\n");

                for(i = 0; i < grado_prim_poli + 1; i++){
                    printf("Valor del coeficiente grado %i: ", i);
                    scanf("%i", &matriz_coef[i]);
                }

                printf("\n\n----------------------------\n");
                printf("PARA EL SEGUNDO POLINOMIO\n");
                printf("----------------------------\n");

                for(i = 0; i < grado_segun_poli + 1; i++){
                    printf("Valor del coeficiente grado %i: ", i);
                    scanf("%i", &aux_var);
                    matriz_coef[i] = matriz_coef[i] - aux_var;
                }

                printf("\n\n----------------------------\n");
                printf("RESULTADOS\n");
                printf("----------------------------\n");

                for(i = max_grad; i >= 0; --i){
                	if(i == 0){
                        printf("%i",  matriz_coef[i]);
                    }
                    else if(i == 1){
                         printf("%ix + ",  matriz_coef[i]);
                    }
                    else{
                        printf("%ix^%i + ", matriz_coef[i], i);
                    }
                }

                printf("\n\n");
                system("pause");
        }
		//FUNCION MULTIPLICACION
		void MULTIPLICACION(){	//ELABORADO: DIEGO SANTIAGO GUTIERREZ		INICIO: 26/11/2019-FINAL: 2/12/2019 		TIEMPO: 8:00-10.00 (a estas horas era posible trabajar)
		    int grado_prim_poli, grado_segun_poli;
			int i=0, x=0, pos=0, ter=0, c=0;
			int grado1, grado2; 
		  
		    //Ingresamos los grados de los 2 polinomios
		    printf("\n------------------------------------------------------------------------------\n");
		    printf("Ingrese el grado del primer polinomio: ");
		    scanf("%i", &grado_prim_poli);
		
		    printf("Ingrese el grado del segundo polinomio: ");
		    scanf("%i", &grado_segun_poli);
		     printf("------------------------------------------------------------------------------\n");
		    
			//Creamos los polinomios de grado + 1
		    int polinomio1[grado_prim_poli + 1];
			int polinomio2[grado_segun_poli + 1];
		 		 
		    	//Polinomio 1	
		     for( i = 0; i < grado_prim_poli + 1; i++) {
		        printf("Valor del coeficiente grado %i para el primer polinomio: ", i);
		        scanf("%i", &polinomio1[i]);
		    }
		     printf("---------------\n");
		    	//Polinomio 2 
		  	 for(i = 0; i < grado_segun_poli + 1; i++) {
		        printf("Valor del coeficiente grado %i para el segundo. polinomio: ", i);
		        scanf("%i", &polinomio2[i]);
		    }
		    printf("---------------\n");
		
		    //Mostramos polinomio1:
		    printf("(");
		    for (x = grado_prim_poli; x >= 0; x--){
		     //Dibujamos los x^2 o mayor
		     	if (x > 1)
		   			printf(" %dx^%d ", polinomio1[x], x );
		     //Si es 1 dibujamos solamente "x"
		     	else if (x == 1) 
			 		printf(" %dx ", polinomio1[x] );
		     //Y si es 0 no dibujamos la "x"
		     	else if (x == 0) 
				 		printf(" %d ", polinomio1[x] );
		     //Para que no se dibuje un + luego del Ãºltimo termino
		     	if (x != 0)
		     		printf(" + ");
		     }
		     printf(") * (");
		 
		    //Mostramos polinomio2
		    for (x = grado_segun_poli; x >= 0; x--){
		    	if (x > 1)
		        	printf(" %dx^%d ", polinomio2[x], x );
		     	else if (x == 1) 
				 	printf(" %dx ", polinomio2[x] );
		     	else if (x == 0) 
				 	printf(" %d ", polinomio2[x] );
		     	if (x != 0)
		     		printf(" + ");
		    }
		    printf(")");
		 
		    //Termino mayor del polinomio Resultante es  x^(grado1+grado2)
		    int polinomioResultante [grado_prim_poli + grado_segun_poli + 1];
		 
		    //Iniciamos como 0 los valores del polinomio resultante
		    for (c = 0; c < grado_prim_poli + grado_segun_poli + 1; c++)
		        polinomioResultante[c] = 0;
		 
		    //Por cada termino del polinomio1
		    for (pos = 0; pos < grado_prim_poli + 1; pos++)
		    //Vamos a multiplicar cada termino del polinomio2
		        for (ter = 0; ter < grado_segun_poli + 1; ter++){
		            //pos + ter = x ^ (pos + ter)
		            polinomioResultante[pos + ter] += polinomio1[pos] * polinomio2[ter];
		        }
		 
		 
		    //Mostramos el Polinomio Resultante:
		    printf("\n\nPolinomio Resultante: \n\n");
		    printf("\n------------------------------------------------------------------------------\n");
		    for (x = grado_prim_poli+grado_segun_poli; x >= 0; x--){
		     	if (x > 1)
		        	printf(" %dx^%d ", polinomioResultante[x], x );
		     	else if (x == 1) 	
					printf(" %dx ", polinomioResultante[x] );
		    	else if (x == 0) 
					printf(" %d ", polinomioResultante[x] );
		     	if (x != 0)
		     		printf(" + ");
		    }
		}
		//FUNCION SALIR
		void SALIR(){
    	printf("------------------------------------------------------------\n");
		printf("LA EJECUCION HA LLEGADO A SU FINAL\n");   
		printf("------------------------------------------------------------\n");  }
		//FUNCION DERIVADA Y SUMA
		int inicializarPolinomio(Polinomio **polinomio){
	*polinomio = (Polinomio*)malloc(sizeof(Polinomio));
	if(*polinomio!=NULL){
		(*polinomio)->siguiente=NULL;
		(*polinomio)->exponente=-1;
		return 1;
	}
	return 0;
}
int insertarEnPolinomio(Polinomio *polinomio, int coeficiente, int exponente){
	Nodo *aux;
	aux=polinomio;
	while(aux->siguiente!=NULL){
		if(aux->siguiente->exponente==exponente){
			aux->siguiente->coeficiente+=coeficiente;
			return 1;
		}else if(aux->siguiente->exponente<exponente){
			aux=aux->siguiente;
		}else{
			Polinomio *aux2;
			aux2 = (Polinomio*)malloc(sizeof(Polinomio));
			if(aux2==NULL) 
				return 0;
			aux2->coeficiente = coeficiente;
			aux2->exponente = exponente;
			aux2->siguiente = aux->siguiente;
			aux->siguiente = aux2;
			return 1;
		}
	}
	Nodo *aux2;
	aux2 = (Polinomio*)malloc(sizeof(Polinomio));
	if(aux2==NULL) 
		return 0;
	aux2->coeficiente = coeficiente;
	aux2->exponente = exponente;
	aux2->siguiente = NULL;
	aux->siguiente = aux2;
	return 1;
}

int inicializarListaPolinomios(ListaPolinomios **lista){
	*lista = (ListaPolinomios*)malloc(sizeof(ListaPolinomios));
	if(*lista!=NULL){
		(*lista)->siguiente=NULL;
		return 1;
	}
	return 0;
}
int insertarPolinomio(ListaPolinomios *lista, Polinomio *polinomio){
	ListaPolinomios *aux;
	aux=lista;
	while(aux->siguiente!=NULL){
		aux=aux->siguiente;
	}
	ListaPolinomios *aux2;
	if(inicializarListaPolinomios(&aux2)){
		aux2->polinomio=polinomio;
		imprimirPolinomio(aux2->polinomio);
		aux->siguiente=aux2;
		return 1;
	}
	else
		return 0;
}

void imprimirPolinomio(Polinomio *polinomio){
	int flag = 1;
	Nodo *aux = polinomio->siguiente;
	while(aux!=NULL){
		if(flag){
			if(aux->coeficiente!=0){
				flag=0;
				printf("%d",aux->coeficiente);
				if(aux->exponente>1)
					printf("x^%d", aux->exponente);
				else if(aux->exponente==1)
					printf("x");
			}
		}else{
			if(aux->coeficiente>0)
				printf("+");
			if(aux->coeficiente!=0){
				printf("%d",aux->coeficiente);
				if(aux->exponente>1)
					printf("x^%d", aux->exponente);
				else if(aux->exponente==1)
					printf("x");
			}
		}
		aux=aux->siguiente;
	}
	printf("\n");
}
void diferenciarPolinomio(Polinomio *polinomio){
	Nodo *aux = polinomio->siguiente;
	while(aux!=NULL){
		aux->coeficiente*=aux->exponente;
		aux->exponente--;
		aux=aux->siguiente;
	}
}
void imprimirLista(ListaPolinomios **lista){
	ListaPolinomios *aux = (*lista)->siguiente;
	while(aux!=NULL){
		imprimirPolinomio(aux->polinomio);
		aux=aux->siguiente;
	}
}
void sumarPolinomios(ListaPolinomios *lista,Polinomio *polinomio){
	ListaPolinomios *aux = lista->siguiente;
	Nodo *auxP;
	while(aux!=NULL){
		auxP = aux->polinomio->siguiente;
		while(auxP!=NULL){
			insertarEnPolinomio(polinomio,auxP->coeficiente, auxP->exponente);
			auxP=auxP->siguiente;
		}
		aux=aux->siguiente;
	}
}

void menuDERIVADA(){
	Polinomio *polinomio;
	int coeficiente,exponente;
	inicializarPolinomio(&polinomio);
	printf("Ingresa el polinomio SOLO ENTEROS(ingresa -1 en el exponente para finalizar):\n");
	do{
		printf("Coeficiente: ");
		scanf("%d",&coeficiente);
		printf("Exponente: ");
		scanf("%d",&exponente);
		if(exponente>=0)
			insertarEnPolinomio(polinomio,coeficiente,exponente);
	}while(exponente!=-1);
	printf("Polinomio original: ");
	imprimirPolinomio(polinomio);
	diferenciarPolinomio(polinomio);
	printf("Polinomio diferenciado: ");
	imprimirPolinomio(polinomio);
	printf("Presiona ENTER para continuar...\n");
	while(getchar()!='\n');
	getchar();
}
void menuSUMA(){
	ListaPolinomios *lista;
	inicializarListaPolinomios(&lista);
	int cantidadPolinomios=0,salir=0;
	char opcion;
	Polinomio *polinomio;
	int coeficiente,exponente;
	printf("Ingresa por lo menos dos polinomios:\n");
	do{
		inicializarPolinomio(&polinomio);
		printf("Ingresa el polinomio SOLO ENTEROS(ingresa -1 en el exponente para finalizar):\n");
		do{
			printf("Coeficiente: ");
			scanf("%d",&coeficiente);
			printf("Exponente: ");
			scanf("%d",&exponente);
			if(exponente>=0)
				insertarEnPolinomio(polinomio,coeficiente,exponente);
		}while(exponente!=-1);
		insertarPolinomio(lista, polinomio);
		cantidadPolinomios++;
		printf("Llevas %d polinomio(s) ingresados\n", cantidadPolinomios);
		printf("Presiona ENTER para continuar...\n");
		while(getchar()!='\n');
		getchar();
		if(cantidadPolinomios>=2){
			printf("Â¿Deseas ingresar otro polinomio?\n1)Si\n2)No\n");
			opcion=getchar();
			if(opcion=='2')
				salir=1;
		}
	}while(cantidadPolinomios<2||!salir);
	printf("Lista de polinomios:\n");
	imprimirLista(&lista);
	printf("Suma:\n");
	inicializarPolinomio(&polinomio);
	sumarPolinomios(lista,polinomio);
	imprimirPolinomio(polinomio);
	printf("Presiona ENTER para continuar...\n");
	while(getchar()!='\n');
	getchar();
}
		//FUNCION DIVISION
		void DIVISION(){
		    int grado_prim_poli, grado_segun_poli;
	int i=0, x=0, pos=0, ter=0, c=0;
	int grado1, grado2; 
	int a;
    printf("Programa para dividir un polinomio entre un monomio\n\n");
  
    //Ingresamos los grados de los 2 polinomios
     printf("\n------------------------------------------------------------------------------\n");
    printf("Ingrese el grado del primer polinomio: ");
    scanf("%i", &grado_prim_poli);

    printf("Ingrese el grado del monomio: ");
    scanf("%i", &grado_segun_poli);
     printf("------------------------------------------------------------------------------\n");
    
	//Creamos los polinomios de grado + 1
    float polinomio1[grado_prim_poli + 1];
	float polinomio2;
 		 
    	//Polinomio 1	
     for( i = 0; i < grado_prim_poli + 1; i++) {
        printf("Valor del coeficiente grado %i para el primer polinomio: ", i);
        scanf("%f", &polinomio1[i]);
    }
     printf("---------------\n");
    	//Polinomio 2 
  	 
        printf("Valor del coeficiente grado %i para el monomio: ", grado_segun_poli);
        scanf("%f", &polinomio2);
    
    printf("---------------\n");

 
    //Mostramos polinomio1:
    printf("(");
    for (x = grado_prim_poli; x >= 0; x--){
     //Dibujamos los x^2 o mayor
     if (x > 1)
        printf(" %dx^%d ", polinomio1[x], x );
     //Si es 1 dibujamos solamente "x"
     else if (x == 1) printf(" %dx ", polinomio1[x] );
     //Y si es 0 no dibujamos la "x"
     else if (x == 0) printf(" %d ", polinomio1[x] );
     //Para que no se dibuje un + luego del Ãºltimo termino
     if (x != 0)
     printf(" + ");
    }
    printf(") / (");
 
    //Mostramos polinomio2
    
        printf(" %dx^%d ", polinomio2, grado_segun_poli );
     
    
    printf(")");
 
    //Termino mayor del polinomio Resultante es  x^(grado1+grado2)
    a=fabs(grado_prim_poli - grado_segun_poli);
    float polinomioResultante [a];
 
    //Iniciamos como 0 los valores del polinomio resultante
    for (c = 0; c < grado_prim_poli + 1; c++)
        polinomioResultante[c] = 0;
 
    //Por cada termino del polinomio1
    for (pos = 0; pos < grado_prim_poli + 1; pos++)
    //Vamos a multiplicar cada termino del polinomio2
    
            //pos + ter = x ^ (pos + ter)
            polinomioResultante[pos - ter] = polinomio1[pos] / polinomio2;
        
 
 
    //Mostramos el Polinomio Resultante:
    printf("\n\nPolinomio Resultante: \n\n");
    printf("------------------------------------------------------------------------------\n");
    for (x = grado_prim_poli; x >= 0; x--){
     
        printf(" %dx^%d ", polinomioResultante[x], x - grado_segun_poli );
    
     if (x != 0)
     printf(" + ");
    }
}
 //void QUE AUN NO TENEMOS
    void CARGAR(){
        printf("------------------------------------------------------------------------------\n");
        printf("\nEstamos trabajando para brindarle un mejor servicio, lamentamos las molestias que esto le genera\n");
        printf("------------------------------------------------------------------------------\n");
    }
    void GUARDAR(){
        printf("------------------------------------------------------------------------------\n");
        printf("\nEstamos trabajando para brindarle un mejor servicio, lamentamos las molestias que esto le genera\n");
        printf("------------------------------------------------------------------------------\n");
    }
    void AGREGAR(){
        printf("------------------------------------------------------------------------------\n");
        printf("\nEstamos trabajando para brindarle un mejor servicio, lamentamos las molestias que esto le genera\n");
        printf("------------------------------------------------------------------------------\n");
    }
